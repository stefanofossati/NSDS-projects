[
    {
        "id": "e0d233bea8e17753",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f2ce9e33f61eafc",
        "type": "mongodb4-client",
        "name": "MongoDB noderedTest",
        "protocol": "mongodb",
        "hostname": "",
        "port": "",
        "dbName": "test-db",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "mongodb://noderedTest:test@mongodb:27017/?authMechanism=SCRAM-SHA-256&authSource=test-db",
        "advanced": "",
        "uriTabActive": "tab-uri-advanced"
    },
    {
        "id": "e0054114c2c88607",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.178.70",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b5c2c23be0b41b02",
        "type": "mqtt in",
        "z": "e0d233bea8e17753",
        "name": "",
        "topic": "iot/native/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e0054114c2c88607",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "7ffed98376d6c2c1"
            ]
        ]
    },
    {
        "id": "7ffed98376d6c2c1",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "Convert to db object",
        "func": "var obj = {\n    myName: msg.payload.myName,\n    seq: msg.payload.seq,\n    timestemp: new Date(msg.payload.timestemp),\n    temp: msg.payload.temp\n}\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "5fc6786328a33f82"
            ]
        ]
    },
    {
        "id": "5fc6786328a33f82",
        "type": "mongodb4",
        "z": "e0d233bea8e17753",
        "clientNode": "4f2ce9e33f61eafc",
        "mode": "collection",
        "collection": "temp",
        "operation": "insertOne",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "19babfd11b9773e3",
        "type": "e-mail",
        "z": "e0d233bea8e17753",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 1530,
        "y": 560,
        "wires": []
    },
    {
        "id": "e663d2e35285168c",
        "type": "mongodb4",
        "z": "e0d233bea8e17753",
        "clientNode": "4f2ce9e33f61eafc",
        "mode": "collection",
        "collection": "temp",
        "operation": "find",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "69626c4d306c1aeb"
            ]
        ]
    },
    {
        "id": "daba21feb266f058",
        "type": "debug",
        "z": "e0d233bea8e17753",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 560,
        "wires": []
    },
    {
        "id": "cd747e9e8a0a02f6",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "Create filter",
        "func": "const NotifyEvery = {\n    Hour: 'Hour',\n    Day: 'Day',\n    Week: 'Week',  // da vedere se inserire\n    Month: 'Month'\n};\n\nconst every = NotifyEvery.Month;\n\nconst date = new Date();\n\nvar filter;\nfunction SetPeriodic(){\n    switch(every){\n        case NotifyEvery.Hour:\n            if(date.getMinutes() == 0){\n                filter = {\n                    timestemp: {\n                        $gt: new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours() - 1),\n                        $lt: new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours())\n                    }\n                };\n            }\n            break;\n        case NotifyEvery.Day:\n            if(date.getHours() == 0){\n                filter = {\n                    timestemp: {\n                        $gt: new Date(date.getFullYear(), date.getMonth(), date.getDate() - 1),\n                        $lt: new Date(date.getFullYear(), date.getMonth(), date.getDate())\n                    }\n                }; \n            }\n            break;\n        /*case NotifyEvery.Week:\n            if (date.getHours() = 0) {\n                filter = {\n                    timestemp: {\n                        $gt: new Date(date.getFullYear(), date),\n                        $lt: new Date()\n                    }\n                };\n            }\n            break;*/\n        case NotifyEvery.Month:\n            if (date.getDate() == 0) {\n                filter = {\n                    timestemp: {\n                        $gt: new Date(date.getFullYear(), date.getMonth() - 1),\n                        $lt: new Date(date.getFullYear(), date.getMonth())\n                    }\n                };\n            }\n            break;\n    }\n        \n}\n\nmsg.payload = filter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "69626c4d306c1aeb",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "Find highest and lowest temperature",
        "func": "class Value {\n    value;\n    timestemp;\n\n    constructor(value, timestemp) {\n        this.value = value;\n        this.timestemp = timestemp;\n    }\n\n    setTimestemp(newTimestemp) {\n        this.timestemp = newTimestemp;\n    };\n    setValue(newValue) {\n        this.value = newValue;\n    };\n}\n\nclass HighAndLowValues {\n    highestValue;\n    lowestValue;\n\n    constructor(firstValue, timestemp) {\n        this.highestValue = new Value(firstValue, timestemp);\n        this.lowestValue = new Value(firstValue, timestemp);\n    }\n};\n\nclass Temperatures extends HighAndLowValues {\n    returnObject() {\n        return {\n            highestTemp: this.highestValue,\n            lowestTemp: this.lowestValue\n        };\n    }\n\n}\n\nfunction CalculateAvarageTemp(array) {\n    let count = 0;\n    let sumTemp = 0;\n    for (let index = 0; index < array.length; index++) {\n        for (let i = 0; i < array[index].temp.length; i++) {\n            sumTemp = sumTemp + array[index].temp[i];\n            count++;\n        }\n    }\n\n    return sumTemp / count;\n}\n\nfunction CalculateTemperatures(array){\n    var tempData;\n    \n    if (array === undefined || array.length == 0){   // if the DB returns an empty array\n        return {messageTemp : 'no temperature reveled in this month'};\n    }else{\n        for (let date = 1; date <= 31; date++) {\n            // filtered array is the array with all the temperatures in a day\n            let filteredArray = array.filter(function tempsOfDay(object) {\n                //if (typeof object !== 'undefined') {   \n                    if (object.timestemp > new Date(object.timestemp.getFullYear(), object.timestemp.getMonth(), date)\n                        && object.timestemp < new Date(object.timestemp.getFullYear(), object.timestemp.getMonth(), date + 1)) {\n                        return object;\n                    }\n                //}\n\n            });\n\n            if (filteredArray !== undefined && filteredArray.length != 0) {  //The day of the month could have dates with no data\n                let avarageTemp = CalculateAvarageTemp(filteredArray); \n                let timestemp = new Date(array[0].timestemp.getFullYear(), array[0].timestemp.getMonth(), date)\n\n                if (typeof tempData === 'undefined') {\n                    tempData = new Temperatures(avarageTemp, timestemp);\n                } else {\n                    if (avarageTemp > tempData.highestValue.value) {\n                        tempData.highestValue.setValue(avarageTemp);\n                        tempData.highestValue.setTimestemp(timestemp);\n                    }\n                    if (avarageTemp < tempData.lowestValue.value) {\n                        tempData.highestValue.setValue(avarageTemp);\n                        tempData.highestValue.setTimestemp(timestemp);\n                    }\n                }\n            }\n\n        }\n    }\n    return tempData.returnObject();\n    \n    \n}\n\n\n\n\n\nmsg.payload = CalculateTemperatures(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "502ff1f8d393b078"
            ]
        ]
    },
    {
        "id": "6f7e62e00fe0ff05",
        "type": "inject",
        "z": "e0d233bea8e17753",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "a697c28b69e4fa00"
            ]
        ]
    },
    {
        "id": "a697c28b69e4fa00",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "query if is the first day of the month",
        "func": "const date = new Date();\n\nvar dateFilter;\n\nif (date.getDate() == 1) {\n    dateFilter = {\n        timestemp: {\n            $gt: new Date(date.getFullYear(), date.getMonth() - 1),\n            $lt: new Date(date.getFullYear(), date.getMonth())\n        }\n    };\n    msg.payload = dateFilter\n    return msg ;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "e663d2e35285168c",
                "2be2244bb4fc1d0a"
            ]
        ]
    },
    {
        "id": "502ff1f8d393b078",
        "type": "join",
        "z": "e0d233bea8e17753",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1190,
        "y": 560,
        "wires": [
            [
                "daba21feb266f058"
            ]
        ]
    },
    {
        "id": "20da5d151dfd63e5",
        "type": "mqtt in",
        "z": "e0d233bea8e17753",
        "name": "",
        "topic": "iot/native/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e0054114c2c88607",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "7a21c70d8fd110c9"
            ]
        ]
    },
    {
        "id": "4b8ce7f200a401a9",
        "type": "mongodb4",
        "z": "e0d233bea8e17753",
        "clientNode": "4f2ce9e33f61eafc",
        "mode": "collection",
        "collection": "humidity",
        "operation": "insertOne",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 640,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7a21c70d8fd110c9",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "function 3",
        "func": "var obj = {\n    myName: msg.payload.myName,\n    seq: msg.payload.seq,\n    timestemp: new Date(msg.payload.timestemp),\n    humidity: msg.payload.humidity\n}\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "4b8ce7f200a401a9"
            ]
        ]
    },
    {
        "id": "3d145a8a30315a15",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "Find highest and lowest humidity value",
        "func": "class Value {\n    value;\n    timestemp;\n\n    constructor(value, timestemp) {\n        this.value = value;\n        this.timestemp = timestemp;\n    }\n\n    setTimestemp(newTimestemp) {\n        this.timestemp = newTimestemp;\n    };\n    setValue(newValue) {\n        this.value = newValue;\n    };\n}\n\nclass HighAndLowValues {\n    highestValue;\n    lowestValue;\n\n    constructor(firstValue, timestemp) {\n        this.highestValue = new Value(firstValue, timestemp);\n        this.lowestValue = new Value(firstValue, timestemp);\n    }\n};\n\nclass Humidities extends HighAndLowValues {\n    returnObject() {\n        return {\n            highestHumidity: this.highestValue,\n            lowestHumidity: this.lowestValue\n        };\n    }\n\n}\n\nfunction CalculateAvarageHumidity(array) {\n    let count = 0;\n    let sumHumidity = 0;\n    for (let index = 0; index < array.length; index++) {\n        for (let i = 0; i < array[index].humidity.length; i++) {\n            sumHumidity += + array[index].humidity[i];\n            count++;\n        }\n    }\n\n    return sumHumidity / count;\n}\n\nfunction CalculateTemperatures(array) {\n    var tempData;\n\n    if (array === undefined || array.length == 0) {   // if the DB returns an empty array\n        return { messageTemp: 'no humidity reveled in this month' };\n    } else {\n        for (let date = 1; date <= 31; date++) {\n            // filtered array is the array with all the temperatures in a day\n            let filteredArray = array.filter(function tempsOfDay(object) {\n                //if (typeof object !== 'undefined') {   \n                if (object.timestemp > new Date(object.timestemp.getFullYear(), object.timestemp.getMonth(), date)\n                    && object.timestemp < new Date(object.timestemp.getFullYear(), object.timestemp.getMonth(), date + 1)) {\n                    return object;\n                }\n                //}\n\n            });\n\n            if (filteredArray !== undefined && filteredArray.length != 0) {  //The day of the month could have dates with no data\n                let avarageHumidity = CalculateAvarageHumidity(filteredArray);\n                let timestemp = new Date(array[0].timestemp.getFullYear(), array[0].timestemp.getMonth(), date)\n\n                if (typeof tempData === 'undefined') {\n                    tempData = new Humidities(avarageHumidity, timestemp);\n                } else {\n                    if (avarageHumidity > tempData.highestValue.value) {\n                        tempData.highestValue.setValue(avarageHumidity);\n                        tempData.highestValue.setTimestemp(timestemp);\n                    }\n                    if (avarageHumidity < tempData.lowestValue.value) {\n                        tempData.highestValue.setValue(avarageHumidity);\n                        tempData.highestValue.setTimestemp(timestemp);\n                    }\n                }\n            }\n\n        }\n    }\n    return tempData.returnObject();\n\n\n}\n\n\n\n\n\nmsg.payload = CalculateTemperatures(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 640,
        "wires": [
            [
                "502ff1f8d393b078"
            ]
        ]
    },
    {
        "id": "3b9b18f318d93488",
        "type": "debug",
        "z": "e0d233bea8e17753",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 880,
        "wires": []
    },
    {
        "id": "2be2244bb4fc1d0a",
        "type": "mongodb4",
        "z": "e0d233bea8e17753",
        "clientNode": "4f2ce9e33f61eafc",
        "mode": "collection",
        "collection": "humidity",
        "operation": "find",
        "output": "toArray",
        "handleDocId": false,
        "name": "",
        "x": 650,
        "y": 640,
        "wires": [
            [
                "3d145a8a30315a15"
            ]
        ]
    },
    {
        "id": "d72fd9e67a43a5da",
        "type": "function",
        "z": "e0d233bea8e17753",
        "name": "query of last three days",
        "func": "const date = new Date();\n\nvar dateFilter;\n\nif (true) {\n    dateFilter = {\n        timestemp: {\n            $gt: new Date(date.getFullYear(), date.getMonth(), date.getDate()-3),\n            $lt: new Date(date.getFullYear(), date.getMonth(), date.getDate()+1)\n        }\n    };\n    msg.payload = dateFilter\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "3b9b18f318d93488",
                "e663d2e35285168c",
                "2be2244bb4fc1d0a"
            ]
        ]
    },
    {
        "id": "e3beeac47e5e4bcc",
        "type": "mqtt in",
        "z": "e0d233bea8e17753",
        "name": "",
        "topic": "iot/native/input",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e0054114c2c88607",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 740,
        "wires": [
            [
                "d72fd9e67a43a5da"
            ]
        ]
    },
    {
        "id": "81ca41c27b91bc2f",
        "type": "inject",
        "z": "e0d233bea8e17753",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 940,
        "wires": [
            []
        ]
    }
]